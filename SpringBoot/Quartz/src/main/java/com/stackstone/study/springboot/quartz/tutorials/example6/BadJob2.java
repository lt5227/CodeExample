package com.stackstone.study.springboot.quartz.tutorials.example6;

import lombok.extern.slf4j.Slf4j;
import org.quartz.*;

import java.time.LocalDateTime;

/**
 * Copyright 2020 Oriental Standard All rights reserved.
 *
 * @author: LiLei
 * @className: BadJob2
 * @createTime: 2020/10/15 10:20
 * @description: A job dumb job that will throw a job execution exception
 */
@PersistJobDataAfterExecution
@DisallowConcurrentExecution
@Slf4j
public class BadJob2 implements Job {


    /**
     * <p>
     * Called by the <code>{@link org.quartz.Scheduler}</code> when a <code>{@link org.quartz.Trigger}</code>
     * fires that is associated with the <code>Job</code>.
     * </p>
     *
     * @throws JobExecutionException if there is an exception while executing the job.
     */
    @Override
    public void execute(JobExecutionContext context) throws JobExecutionException {
        JobKey jobKey = context.getJobDetail().getKey();
        log.info("---" + jobKey + " executing at " + LocalDateTime.now());
        // a contrived example of an exception that will be generated by this job due to a divide by zero error
        try {
            int zero = 0;
            int calculation = 4815 / zero;
            log.info("calculation:{}", calculation);
        } catch (Exception e) {
            log.info("--- Error in job!");
            JobExecutionException e2 =
                    new JobExecutionException(e);
            // Quartz will automatically unschedule all triggers associated with this job so that it does not run again
            e2.setUnscheduleAllTriggers(true);
            throw e2;
        }
    }
}
