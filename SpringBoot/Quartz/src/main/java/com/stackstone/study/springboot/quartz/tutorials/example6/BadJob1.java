package com.stackstone.study.springboot.quartz.tutorials.example6;

import lombok.extern.slf4j.Slf4j;
import org.quartz.*;

import java.time.LocalDateTime;
import java.util.Date;

/**
 * Copyright 2020 Oriental Standard All rights reserved.
 *
 * @author: LiLei
 * @className: BadJob1
 * @createTime: 2020/10/15 10:11
 * @description: A job dumb job that will throw a job execution exception
 */
@PersistJobDataAfterExecution
@DisallowConcurrentExecution
@Slf4j
public class BadJob1 implements Job {

    /**
     * <p>
     * Called by the <code>{@link org.quartz.Scheduler}</code> when a <code>{@link org.quartz.Trigger}</code> fires that
     * is associated with the <code>Job</code>.
     * </p>
     *
     * @throws JobExecutionException if there is an exception while executing the job.
     */
    @Override
    public void execute(JobExecutionContext context) throws JobExecutionException {
        JobKey jobKey = context.getJobDetail().getKey();
        JobDataMap dataMap = context.getJobDetail().getJobDataMap();

        int denominator = dataMap.getInt("denominator");
        log.info("---" + jobKey + " executing at " + LocalDateTime.now() + " with denominator " + denominator);

        // a contrived example of an exception that will be generated by this job due to a
        // divide by zero error (only on first run)
        try {
            int calculation = 4815 / denominator;
            log.info("calculation:{}", calculation);
        } catch (Exception e) {
            log.info("--- Error in job!");
            JobExecutionException e2 = new JobExecutionException(e);
            // fix denominator so the next time this job run it won't fail again
            dataMap.put("denominator", "1");
            // this job will refire immediately
            e2.setRefireImmediately(true);
            throw e2;
        }
        log.info("---" + jobKey + " completed at " + new Date());
    }
}
